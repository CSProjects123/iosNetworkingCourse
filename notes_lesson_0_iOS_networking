THESE are my notes from lesson 0 on Udacity's Networking Class:

NSURL - this class lets us represent a URL 

NSURLSession is a class that can manage Network requests on our behalf. You can make modificaions here such as the amount of time you are willing to wait before cancelling a network request. 

NSURLSession.sharedSession() comes preloaded with default settings . It is a singleton. 

IN NSURLSession, all requests are known as tasks. All of these will be a subclass of NSURLSessionTask. 
There are 3 kinds of tasks. 
data --> NSURLSessionDataTask --> directly into memory as NSData
download --> NSURLSessionDownloadTask
upload --> NSURLSessionUpladTask 


We need to "resume" the task explicitly by calling resume.task()

home - command , shift , h 

Use performUiUpdatesOnMain class within the completion handler any time you want to refresh 


By default, only https is allwed. Use the info.plist file to change this ( adding App transport security settings  --> allow arbitart loads  = YES )


Use Command+W to close window 


The method we went over here:


//
//  ViewController.swift
//  ImageRequest
//
//  Created by Jarrod Parkes on 11/3/15.
//  Copyright Â© 2015 Udacity. All rights reserved.
//

import UIKit

// MARK: - ViewController: UIViewController

class ViewController: UIViewController {

    // MARK: Outlets
    
    @IBOutlet weak var imageView: UIImageView!
    
    // MARK: Life Cycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let imageURL = NSURL( string: "http://www.atpworldtour.com/en/news/www.atpworldtour.com/~/media/images/news/2016/01/07/12/28/federer-brisbane-2016-thursday2.jpg")!
        let task = NSURLSession.sharedSession().dataTaskWithURL(imageURL) { (data, response, error) -> Void in
            if error==nil {
                let downloadedImage = UIImage(data: data!)
                performUIUpdatesOnMain{
                    self.imageView.image = downloadedImage
                }
            }
            
        }
        task.resume()
        
        // TODO: Add all the networking code here!
    }
}

A completion handler is a closure 
in the aboove code. the method dataTaskWithURL takes a NSURL and a completionHandler. It takes both. 


Using the closure is like saying, i don't know whent eh code will coplete. But when it does, run these code. 

Instead of the closure, we could haver also used the  NSURLSession's family of delegates to handle running code after the task completes


Note- the task in the completion handler after the "in" happens when the data has been downloaded. And error is nil. 













							QUESTIONS - go over after the lesson is complete: 

What is happening here at the Network layer - what protocol are we using ? 
What does the exclamation point do exactly? Need to review 
What is a closure in swift?
Go over the jeyword "let" in swift
